apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
  namespace: flask-app
  labels:
    app: flask-app
    service: flask-app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold: "3"
    description: "LoadBalancer service for Flask application"
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
  - name: http
    port: 80
    targetPort: 5000
    protocol: TCP
  sessionAffinity: None
  externalTrafficPolicy: Cluster

---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service-internal
  namespace: flask-app
  labels:
    app: flask-app
    service: flask-app-internal
  annotations:
    description: "ClusterIP service for internal communication"
spec:
  type: ClusterIP
  selector:
    app: flask-app
  ports:
  - name: http
    port: 5000
    targetPort: 5000
    protocol: TCP
  sessionAffinity: None

---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service-nodeport
  namespace: flask-app
  labels:
    app: flask-app
    service: flask-app-nodeport
  annotations:
    description: "NodePort service for direct node access"
spec:
  type: NodePort
  selector:
    app: flask-app
  ports:
  - name: http
    port: 5000
    targetPort: 5000
    nodePort: 30080
    protocol: TCP
  sessionAffinity: None